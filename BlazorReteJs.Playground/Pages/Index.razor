@using BlazorReteJs
@using BlazorReteJs.Api
@using DynamicData
@using Microsoft.Extensions.Logging
@using ReactiveUI
@page "/"
@inject IJSRuntime JS
@inject ILoggerFactory lf

<div class="d-flex flex-column h-100">
    <div class="w-100" style="height: 15%">
        <div class="hstack">
            JavaScript
            <button class="btn btn-primary" @onclick="@(async () => await editor.AddNode(GenerateRandomTemplate()))">Add Node</button>
            <button class="btn btn-primary" @onclick="@(async () => await editor.ArrangeNodes())">Arrange</button>
            <button class="btn btn-primary" @onclick="@(async () => await editor.ZoomAtNodes())">ZoomAt Nodes</button>
            <button class="btn btn-primary" @onclick="@(async () => await editor.Clear())">Clear</button>
            <button class="btn btn-primary" @onclick="@(async () => await editor.BackgroundEnabled.SetValue(true))">BG Enable</button>
            <button class="btn btn-primary" @onclick="@(async () => await editor.BackgroundEnabled.SetValue(false))">BG Disable</button>
            <button class="btn btn-primary" @onclick="@(async () => { await editor.AddDockTemplate(GenerateRandomTemplate()); })">Add template</button>
            <button class="btn btn-primary" @onclick="@(GC.Collect)">GC Collect</button>
            @if (NodePositionUpdatesAnchor == null)
            {
                <button class="btn btn-primary" @onclick="@(async () => await ListenToNodeUpdates())">Listen to node updates</button>
            }
            else
            {
                <button class="btn btn-primary" @onclick="@(async () => await UnsubscribeFromNodeUpdates())">Unsub from node updates</button>
            }
            @if (DockTemplateHookAnchor == null)
            {
                <button class="btn btn-primary" @onclick="@(async () => await HookDock())">Hook Dock</button>
            }
            else
            {
                <button class="btn btn-primary" @onclick="@(async () => await UnhookDock())">Unhook Dock</button>
            }
        </div>
        <div>
            Selection:
            @if (SelectedNodeIds == null)
            {
                <button class="btn btn-primary" @onclick="@(async () => await ListenToSelection())">Listen</button>
            }
            else
            {
                @string.Join("+", SelectedNodeIds)
            }
        </div>
        <div class="hstack">
            Nodes:
            @if (Nodes == null)
            {
                <button class="btn btn-primary" @onclick="@(async () => await ListenToNodes())">Listen</button>
            }
            else
            {
                @foreach (var node in Nodes)
                {
                    <div>@($"Node {node.Id} {node.Label.Value}")</div>
                }
            }
        </div>
        <div class="hstack">
            Connections:
            @if (Connections == null)
            {
                <button class="btn btn-primary" @onclick="@(async () => await ListenToConnections())">Listen</button>
            }
            else
            {
                @foreach (var connection in Connections)
                {
                    <div>@($"C {connection.Id} {connection.Source.Value}=>{connection.Target.Value}")</div>
                }
            }
        </div>
    </div>
    <div class="flex-grow-1 w-100" style="height: 85%">
        <BlazorReteEditor @ref="editor" TNode="NodeParams">
            <NodeTemplate>
                <div style="width: 100%; height: 100%; background: #0a53be; border: 1px solid red;">
                    @context.Id
                    <img src="@context.ExtraParams.Url" alt=""/>
                </div>
            </NodeTemplate>
        </BlazorReteEditor>
    </div>
</div>

@code {
    private BlazorReteEditor<NodeParams> editor;

    public string[] SelectedNodeIds { get; private set; }

    public ReteNode[] Nodes { get; private set; }

    public ReteConnection[] Connections { get; private set; }

    public Random Rng { get; } = new Random();

    public IDisposable? NodePositionUpdatesAnchor { get; private set; }
    public IDisposable? DockTemplateHookAnchor { get; private set; }

    protected ReteNodeParams GenerateRandomTemplate()
    {
        return new ReteNodeParams()
        {
            Label = $"L{Guid.NewGuid().ToString().Substring(0, 8)}",
            MaxOutputs = Rng.Next(0, 3),
            MaxInputs = Rng.Next(0, 3),
            ExtraParams = new NodeParams
            {
                Url = $"https://picsum.photos/{Rng.Next(15, 90)}/{Rng.Next(40, 100)}"
            }
        };
    }

    protected async Task UnsubscribeFromNodeUpdates()
    {
        if (NodePositionUpdatesAnchor == null)
        {
            throw new InvalidOperationException();
        }

        NodePositionUpdatesAnchor?.Dispose();
        NodePositionUpdatesAnchor = null;
    }

    protected async Task ListenToNodeUpdates()
    {
        if (NodePositionUpdatesAnchor != null)
        {
            throw new InvalidOperationException();
        }

        NodePositionUpdatesAnchor = editor
            .NodePositionUpdates
            .Subscribe(x =>
            {
                Console.WriteLine($"Node position update received({x.Length}): {string.Join(",", x)}");
                InvokeAsync(StateHasChanged);
            });
    }

    protected async Task UnhookDock()
    {
        if (DockTemplateHookAnchor == null)
        {
            throw new InvalidOperationException();
        }

        DockTemplateHookAnchor?.Dispose();
        DockTemplateHookAnchor = null;
    }
    
    protected async Task HookDock()
    {
        if (DockTemplateHookAnchor != null)
        {
            throw new InvalidOperationException();
        }

        DockTemplateHookAnchor = editor
            .WhenTemplateCreated
            .Subscribe(x =>
            {
                x.NodeParams = GenerateRandomTemplate();
            });
    }

    protected async Task ListenToConnections()
    {
        var connections = await editor.GetConnectionsCache();
        connections
            .Connect()
            .StartWithEmpty()
            .Subscribe(x =>
            {
                Connections = connections.Items.ToArray();
                InvokeAsync(StateHasChanged);
            });
    }

    protected async Task ListenToNodes()
    {
        var nodes = await editor.GetNodesCache();
        nodes
            .Connect()
            .StartWithEmpty()
            .Subscribe(x =>
            {
                Nodes = nodes.Items.ToArray();
                InvokeAsync(StateHasChanged);
            });
    }

    protected async Task ListenToSelection()
    {
        var selectedNodes = await editor.GetSelectedNodes();
        selectedNodes
            .Connect()
            .StartWithEmpty()
            .Subscribe(x =>
            {
                SelectedNodeIds = selectedNodes.Items.ToArray();
                InvokeAsync(StateHasChanged);
            });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            editor
                .WhenLoaded
                .Subscribe(_ => HandleLoaded());
        }
    }

    private async Task HandleLoaded()
    {
    }

}