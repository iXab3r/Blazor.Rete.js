@using BlazorReteJs
@using BlazorReteJs.Api
@using DynamicData
@using ReactiveUI
@page "/"
@inject IJSRuntime JS

<div class="d-flex flex-column h-100">
    <div class="w-100" style="height: 15%">
        <div class="hstack">
            JavaScript
            <button class="btn btn-primary" @onclick="@(async () => await editor.JsEditor.AddNode(GenerateRandomTemplate()))">Add Node</button>
            <button class="btn btn-primary" @onclick="@(async () => await editor.JsEditor.RemoveSelectedNodes())">Remove Nodes</button>
            <button class="btn btn-primary" @onclick="@(async () => await editor.JsEditor.ArrangeNodes(false))">Arrange</button>
            <button class="btn btn-primary" @onclick="@(async () => await editor.JsEditor.ArrangeNodes(true))">Arrange Animated</button>
            <button class="btn btn-primary" @onclick="@(async () => await editor.JsEditor.ZoomAtNodes())">ZoomAt Nodes</button>
            <button class="btn btn-primary" @onclick="@(async () => await editor.JsEditor.EditorRef.InvokeVoidAsync("toggleIsActive"))">Toggle IsActive</button>
            <button class="btn btn-primary" @onclick="@(async () => await editor.JsEditor.Clear())">Clear</button>
            <button class="btn btn-primary" @onclick="@(async () => await editor.JsEditor.BackgroundEnabled.SetValue(true))">BG Enable</button>
            <button class="btn btn-primary" @onclick="@(async () => await editor.JsEditor.BackgroundEnabled.SetValue(false))">BG Disable</button>
            <button class="btn btn-primary" @onclick="@(async () => await editor.JsEditor.AddDockTemplate(GenerateRandomTemplate()))">Add template</button>
        </div> 
        <div class="hstack">
            <button class="btn btn-primary" @onclick="@(async () => await editor.JsEditor.EditorRef.InvokeVoidAsync("setMaxOutputs", 0))">Outputs: 0</button>
            <button class="btn btn-primary" @onclick="@(async () => await editor.JsEditor.EditorRef.InvokeVoidAsync("setMaxOutputs", 1))">Outputs: 1</button>
            <button class="btn btn-primary" @onclick="@(async () => await editor.JsEditor.EditorRef.InvokeVoidAsync("setMaxOutputs", 2))">Outputs: 2</button>
            
            <button class="btn btn-primary" @onclick="@(async () => await editor.JsEditor.EditorRef.InvokeVoidAsync("setMaxInputs", 0))">Inputs: 0</button>
            <button class="btn btn-primary" @onclick="@(async () => await editor.JsEditor.EditorRef.InvokeVoidAsync("setMaxInputs", 1))">Inputs: 1</button>
            <button class="btn btn-primary" @onclick="@(async () => await editor.JsEditor.EditorRef.InvokeVoidAsync("setMaxInputs", 2))">Inputs: 2</button>
        </div>
        <div>
            Selection:
            @if (SelectedNodeIds == null)
            {
                <button class="btn btn-primary" @onclick="@(async () => await ListenToSelection())">Listen</button>
            }
            else
            {
                @string.Join("+", SelectedNodeIds)
            }
        </div>
        <div class="hstack">
            Nodes:
            @if (Nodes == null)
            {
                <button class="btn btn-primary" @onclick="@(async () => await ListenToNodes())">Listen</button>
            }
            else
            {
                @foreach (var node in Nodes)
                {
                    <div>@($"Node {node.Id} {node.Label.Value}")</div>
                }
            }
        </div>
        <div class="hstack">
            Connections:
            @if (Connections == null)
            {
                <button class="btn btn-primary" @onclick="@(async () => await ListenToConnections())">Listen</button>
            }
            else
            {
                @foreach (var connection in Connections)
                {
                    <div>@($"C {connection.Id} {connection.Source.Value}=>{connection.Target.Value}")</div>
                }
            }
        </div>
    </div>
    <div class="flex-grow-1 w-100" style="height: 85%">
        <BlazorReteEditor @ref="editor"/>
    </div>
</div>

@code {
    private BlazorReteEditor editor;

    public string[] SelectedNodeIds { get; private set; }

    public ReteNode[] Nodes { get; private set; }

    public ReteConnection[] Connections { get; private set; }

    public Random Rng { get; } = new Random();
    

    protected ReteNodeParams GenerateRandomTemplate()
    {
        return new ReteNodeParams()
        {
            Label =  $"L{Guid.NewGuid().ToString().Substring(0, 8)}",
            MaxOutputs = Rng.Next(0, 3),
            MaxInputs = Rng.Next(0, 3),
            IsActive = Rng.Next(0, 3) switch { 0 => null, 1 => false, 2 => true },
            IsBusy = Rng.Next(0, 3) switch { 0 => null, 1 => false, 2 => true },
            LabelPrefix = Rng.Next(0, 2) switch{ 0 => null, 1 => "P-"},
            LabelSuffix = Rng.Next(0, 2) switch{ 0 => null, 1 => "-S"},
        };
    }

    protected async Task ListenToConnections()
    {
        var connections = await editor.GetConnectionsCache();
        connections
            .Connect()
            .StartWithEmpty()
            .Subscribe(x =>
            {
                Connections = connections.Items.ToArray();
                StateHasChanged();
            });
    }

    protected async Task ListenToNodes()
    {
        var nodes = await editor.GetNodesCache();
        nodes
            .Connect()
            .StartWithEmpty()
            .Subscribe(x =>
            {
                Nodes = nodes.Items.ToArray();
                StateHasChanged();
            });
    }

    protected async Task ListenToSelection()
    {
        var selectedNodes = await editor.GetSelectedNodes();
        selectedNodes
            .Connect()
            .StartWithEmpty()
            .Subscribe(x =>
            {
                SelectedNodeIds = selectedNodes.Items.ToArray();
                StateHasChanged();
            });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            editor
                .WhenLoaded
                .Subscribe(_ => HandleLoaded());
        }
    }

    private async Task HandleLoaded()
    {
    }

}