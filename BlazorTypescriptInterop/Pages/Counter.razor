@page "/counter"
@inject IJSRuntime JS

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<button class="btn btn-secondary" @onclick="@(async () => await sweetAlertModule.InvokeVoidAsync("showAlert", "test"))">Notification</button>
<button class="btn btn-secondary" @onclick="@(async () => await reactModule.InvokeVoidAsync("renderTestReactComponent", "react-root"))">Render</button>
<button class="btn btn-secondary" @onclick="@(async () => await reteModule.InvokeVoidAsync("renderEditor", "react-root"))">Render Rete</button>

<div id="react-root" style="height: 500px; width: 100%; background: teal;"></div>

@code {
    private IJSObjectReference? sweetAlertModule;
    private IJSObjectReference? reactModule;
    private IJSObjectReference? reteModule;
    private int currentCount = 0;

    protected override async Task OnInitializedAsync()
    {
        sweetAlertModule = await JS.InvokeAsync<IJSObjectReference>("import", "/js/sweetAlertInterop.js");
        reactModule = await JS.InvokeAsync<IJSObjectReference>("import", "/js/reactInterop.js");
        reteModule = await JS.InvokeAsync<IJSObjectReference>("import", "/js/reteInterop.js");

        await base.OnInitializedAsync();
    }
    
    private async Task IncrementCount()
    {
        await sweetAlertModule.InvokeVoidAsync("showAlert", "test");
        currentCount++;
    }
}
